def connectToServer(String ipAddress) {
    script {
        withCredentials([sshUserPrivateKey(credentialsId: 'aws-key-ssh', keyFileVariable: 'KEY_FILE')]) {
            sshagent(['aws-key-ssh']) {
                sh """
                ssh -o StrictHostKeyChecking=no -i $KEY_FILE ec2-user@$ipAddress '
                sudo yum install docker -y
                sudo systemctl restart docker
                sudo docker-compose up -d --scale web=1.${BUILD_NUMBER}
                '
                """
            }
        }
    }
}

pipeline {
    agent any
    environment {
        EC2_IP_TEST = "16.171.133.85"
        EC2_IP_PROD = "13.48.192.33"
    }
    stages {
        stage('Clean Up') {
            steps {
                // Clean Up Project Files And Clone Git - To Update The Project
                sh 'rm -rf *'
                sh 'git clone https://github.com/shaked0703/flask.git'
                // Deletes Previous Docker Images
                sh 'docker rmi -f shaked0703/docflask2:latest'
            }
        }
        stage('Build And Push The Image To Docker Hub') {
            steps {
                // Creates Docker Image
                dir('flask') {
                    sh "docker-compose build 1.${BUILD_NUMBER}"
                }
                // Pushes Docker Image To Docker Hub
                sh 'docker push shaked0703/docflask2:1.${BUILD_NUMBER}'
                sh 'docker push shaked0703/docflask2:latest'
                // Cleanup old Docker images
                sh "docker image ls --format '{{.ID}}' shaked0703/docflask2 --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}"
            }
        }
        stage('Running Docker On Test Server') {
            steps {
                connectToServer(EC2_IP_TEST)
                // Runs tests from the main machine on the website
                sh 'chmod +x flask/tests.sh'
                sh './flask/tests.sh'
            }
        }
        stage('Running Docker On Prod Server') {
            steps {
                connectToServer(EC2_IP_PROD)
            }
        }
    }
}
